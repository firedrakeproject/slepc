!
!  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!  SLEPc - Scalable Library for Eigenvalue Problem Computations
!  Copyright (c) 2002-2016, Universitat Politecnica de Valencia, Spain
!
!  This file is part of SLEPc.
!
!  SLEPc is free software: you can redistribute it and/or modify it under  the
!  terms of version 3 of the GNU Lesser General Public License as published by
!  the Free Software Foundation.
!
!  SLEPc  is  distributed in the hope that it will be useful, but WITHOUT  ANY
!  WARRANTY;  without even the implied warranty of MERCHANTABILITY or  FITNESS
!  FOR  A  PARTICULAR PURPOSE. See the GNU Lesser General Public  License  for
!  more details.
!
!  You  should have received a copy of the GNU Lesser General  Public  License
!  along with SLEPc. If not, see <http://www.gnu.org/licenses/>.
!  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!
      interface NEPGetEigenpair
        subroutine NEPGetEigenpair00(a,b,c,d,e,f,z)
          use slepcnepdef
          NEP a
          PetscInt b
          PetscScalar c
          PetscScalar d
          Vec e
          Vec f
          integer z
        end subroutine
        subroutine NEPGetEigenpair10(a,b,c,d,e,f,z)
          use slepcnepdef
          NEP a
          PetscInt b
          PetscScalar c(*)
          PetscScalar d
          Vec e
          Vec f
          integer z
        end subroutine
        subroutine NEPGetEigenpair01(a,b,c,d,e,f,z)
          use slepcnepdef
          NEP a
          PetscInt b
          PetscScalar c
          PetscScalar d(*)
          Vec e
          Vec f
          integer z
        end subroutine
        subroutine NEPGetEigenpair11(a,b,c,d,e,f,z)
          use slepcnepdef
          NEP a
          PetscInt b
          PetscScalar c(*)
          PetscScalar d(*)
          Vec e
          Vec f
          integer z
        end subroutine
      end interface NEPGetEigenpair

      interface NEPGetTolerances
        subroutine NEPGetTolerances00(a,b,c,z)
          use slepcnepdef
          NEP a
          PetscReal b
          PetscInt c
          integer z
        end subroutine
        subroutine NEPGetTolerances10(a,b,c,z)
          use slepcnepdef
          NEP a
          PetscReal b(*)
          PetscInt c
          integer z
        end subroutine
        subroutine NEPGetTolerances01(a,b,c,z)
          use slepcnepdef
          NEP a
          PetscReal b
          PetscInt c(*)
          integer z
        end subroutine
      end interface NEPGetTolerances

